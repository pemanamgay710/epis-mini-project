name: CI â€” pytest + MySQL

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        ports:
          - 3306:3306
        # allow some time for DB to initialize
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=30

    env:
      # match the values used by tests/conftest.py (or read from .env.test)
      TEST_DB_HOST: 127.0.0.1
      TEST_DB_USER: root
      TEST_DB_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      TEST_DB_NAME: final_epis_db_test
      PYTHONWARNINGS: "ignore::DeprecationWarning"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system packages (mysql client)
        run: |
          sudo apt-get update
          sudo apt-get install -y default-mysql-client

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # make sure pytest is available
          pip install pytest pytest-mock python-dotenv

      - name: Wait for MySQL to be ready
        run: |
          # Wait until mysql is accepting connections
          for i in {1..30}; do
            if mysql -h 127.0.0.1 -P 3306 -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "select 1" &>/dev/null; then
              echo "MySQL ready"
              break
            fi
            echo "Waiting for MySQL... ($i)"
            sleep 2
          done

      - name: Create test database and import schema
        run: |
          # Create test DB
          mysql -h 127.0.0.1 -P 3306 -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "CREATE DATABASE IF NOT EXISTS ${TEST_DB_NAME};"
          # Import schema file if exists (ensure final_epis_db.sql is in repo root)
          if [ -f final_epis_db.sql ]; then
            mysql -h 127.0.0.1 -P 3306 -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" ${TEST_DB_NAME} < final_epis_db.sql
          else
            echo "Schema file final_epis_db.sql not found in repo root. Skipping import."
          fi

      - name: Show Python and pip info (debug)
        run: |
          python -V
          pip -V

      - name: Run tests with pytest
        env:
          # ensure test processes use the test DB env variables
          TEST_DB_HOST: ${{ env.TEST_DB_HOST }}
          TEST_DB_USER: ${{ env.TEST_DB_USER }}
          TEST_DB_PASSWORD: ${{ env.TEST_DB_PASSWORD }}
          TEST_DB_NAME: ${{ env.TEST_DB_NAME }}
        run: |
          # Run pytest and produce junit xml so CI tools can read results
          pytest -q --junitxml=pytest-report.xml || true
          echo "pytest exit code captured (non-zero does not stop artifact upload step)"

      - name: Upload pytest report (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: pytest-report
          path: pytest-report.xml
