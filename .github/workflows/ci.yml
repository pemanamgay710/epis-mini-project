name: CI â€” Unit Tests (pytest)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}   # allows manual runs from the Actions UI

jobs:
  unit-tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; else pip install pytest pytest-mock; fi

      - name: Run pytest (unit tests)
        run: |
          # run only unit tests (files that do not require DB)
          pytest -q tests/test_user_model.py tests/test_auth_unit.py --junitxml=pytest-report.xml

      - name: Upload pytest report
        uses: actions/upload-artifact@v4
        with:
          name: pytest-report
          path: pytest-report.xml

# -----------------------------------------------------------------------------
# Optional: integration-tests job template (disabled by default)
# When you add real DB/integration tests, remove `if: false` or set a condition
# (e.g. run only on manual dispatch) and ensure you add the secret
# MYSQL_ROOT_PASSWORD in your repo Settings -> Secrets -> Actions.
# -----------------------------------------------------------------------------
  integration-tests:
    if: ${{ false }}       # <-- change to a condition (or remove this line) to enable
    name: Integration tests (MySQL)
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: final_epis_db_test
        options: >-
          --health-cmd="bash -c 'mysqladmin ping -h 127.0.0.1 -uroot -p${MYSQL_ROOT_PASSWORD} >/dev/null 2>&1 || exit 1'"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=60

    env:
      TEST_DB_HOST: 127.0.0.1
      TEST_DB_USER: root
      TEST_DB_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      TEST_DB_NAME: final_epis_db_test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install mysql client & Python deps
        run: |
          sudo apt-get update
          sudo apt-get install -y default-mysql-client
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-mock python-dotenv mysql-connector-python

      - name: Wait for MySQL
        run: |
          for i in $(seq 1 60); do
            echo "Attempt $i - checking mysql..."
            if mysql -h 127.0.0.1 -P 3306 -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "SELECT 1" >/dev/null 2>&1; then
              echo "mysql ready"
              break
            fi
            sleep 2
          done

      - name: Create test DB and import schema (if present)
        run: |
          mysql -h 127.0.0.1 -P 3306 -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "CREATE DATABASE IF NOT EXISTS ${TEST_DB_NAME};"
          if [ -f final_epis_db.sql ]; then
            mysql -h 127.0.0.1 -P 3306 -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" ${TEST_DB_NAME} < final_epis_db.sql
          else
            echo "No final_epis_db.sql found; skip import"
          fi

      - name: Run pytest (integration)
        run: |
          pytest -q tests/integration_test_db.py --maxfail=1 --junitxml=pytest-integration-report.xml

      - name: Upload pytest integration report
        uses: actions/upload-artifact@v4
        with:
          name: pytest-integration-report
          path: pytest-integration-report.xml
